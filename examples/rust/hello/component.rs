// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod wex_examples {
        pub mod hello {

            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod handler {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_hello_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::hello();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_hello<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn hello() -> _rt::String;
                }
                #[doc(hidden)]

                macro_rules! __export_wex_examples_hello_handler_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[unsafe(export_name = "wex-examples:hello/handler#hello")]
          unsafe extern "C" fn export_hello() -> *mut u8 {
            unsafe { $($path_to_types)*::_export_hello_cabi::<$ty>() }
          }
          #[unsafe(export_name = "cabi_post_wex-examples:hello/handler#hello")]
          unsafe extern "C" fn _post_return_hello(arg0: *mut u8,) {
            unsafe { $($path_to_types)*::__post_return_hello::<$ty>(arg0) }
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_wex_examples_hello_handler_cabi;

                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
        pub mod rust_hello {

            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod test {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_stringin_cabi<T: Guest>(arg0: *mut u8, arg1: usize) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    T::stringin(_rt::string_lift(bytes0));
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_numbers_cabi<T: Guest>(arg0: i64) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::numbers(arg0 as u64);
                    _rt::as_i32(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_lists_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let result1 = T::lists(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = (result1).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr2
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len3;
                    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_lists<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 4, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_small_cabi<T: Guest>(
                    arg0: i32,
                    arg1: i32,
                    arg2: i32,
                    arg3: i32,
                    arg4: i32,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::small(
                        arg0 as u8,
                        arg1 as u16,
                        arg2 as u32,
                        arg3 as i8,
                        arg4 as i16,
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let (t2_0, t2_1, t2_2) = result0;
                    *ptr1.add(0).cast::<u8>() = (_rt::as_i32(t2_0)) as u8;
                    *ptr1.add(2).cast::<u16>() = (_rt::as_i32(t2_1)) as u16;
                    *ptr1.add(4).cast::<i32>() = _rt::as_i32(t2_2);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_floats_cabi<T: Guest>(arg0: f32, arg1: f64) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::floats(arg0, arg1);
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let (t2_0, t2_1) = result0;
                    *ptr1.add(0).cast::<f32>() = _rt::as_f32(t2_0);
                    *ptr1.add(8).cast::<f64>() = _rt::as_f64(t2_1);
                    ptr1
                }
                pub trait Guest {
                    fn stringin(p: _rt::String) -> ();
                    fn numbers(p: u64) -> u32;
                    fn lists(p: _rt::Vec<u32>) -> _rt::Vec<u32>;
                    fn small(a: u8, b: u16, c: u32, aa: i8, bb: i16) -> (u8, u16, u32);
                    fn floats(a: f32, b: f64) -> (f32, f64);
                }
                #[doc(hidden)]

                macro_rules! __export_wex_examples_rust_hello_test_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "wex-examples:rust-hello/test#stringin")]
    unsafe extern "C" fn export_stringin(arg0: *mut u8,arg1: usize,) {
      unsafe { $($path_to_types)*::_export_stringin_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "wex-examples:rust-hello/test#numbers")]
    unsafe extern "C" fn export_numbers(arg0: i64,) -> i32 {
      unsafe { $($path_to_types)*::_export_numbers_cabi::<$ty>(arg0) }
    }
    #[unsafe(export_name = "wex-examples:rust-hello/test#lists")]
    unsafe extern "C" fn export_lists(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_lists_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "cabi_post_wex-examples:rust-hello/test#lists")]
    unsafe extern "C" fn _post_return_lists(arg0: *mut u8,) {
      unsafe { $($path_to_types)*::__post_return_lists::<$ty>(arg0) }
    }
    #[unsafe(export_name = "wex-examples:rust-hello/test#small")]
    unsafe extern "C" fn export_small(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_small_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4) }
    }
    #[unsafe(export_name = "wex-examples:rust-hello/test#floats")]
    unsafe extern "C" fn export_floats(arg0: f32,arg1: f64,) -> *mut u8 {
      unsafe { $($path_to_types)*::_export_floats_cabi::<$ty>(arg0, arg1) }
    }
  };);
}
                #[doc(hidden)]
                pub(crate) use __export_wex_examples_rust_hello_test_cabi;

                #[repr(align(8))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {
    #![allow(dead_code, clippy::all)]

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub use alloc_crate::string::String;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }

    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }

    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }

    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }

    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }

    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }

    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }

    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }

    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_component_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::wex_examples::rust_hello::test::__export_wex_examples_rust_hello_test_cabi!($ty with_types_in $($path_to_types_root)*::exports::wex_examples::rust_hello::test);
  $($path_to_types_root)*::exports::wex_examples::hello::handler::__export_wex_examples_hello_handler_cabi!($ty with_types_in $($path_to_types_root)*::exports::wex_examples::hello::handler);
  )
}
#[doc(inline)]
pub(crate) use __export_component_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:wex-examples:rust-hello:component:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 384] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x80\x02\x01A\x02\x01\
A\x04\x01B\x0d\x01@\x01\x01ps\x01\0\x04\0\x08stringin\x01\0\x01@\x01\x01pw\0y\x04\
\0\x07numbers\x01\x01\x01py\x01@\x01\x01p\x02\0\x02\x04\0\x05lists\x01\x03\x01o\x03\
}{y\x01@\x05\x01a}\x01b{\x01cy\x02aa~\x02bb|\0\x04\x04\0\x05small\x01\x05\x01o\x02\
vu\x01@\x02\x01av\x01bu\0\x06\x04\0\x06floats\x01\x07\x04\0\x1cwex-examples:rust\
-hello/test\x05\0\x01B\x02\x01@\0\0s\x04\0\x05hello\x01\0\x04\0\x1awex-examples:\
hello/handler\x05\x01\x04\0!wex-examples:rust-hello/component\x04\0\x0b\x0f\x01\0\
\x09component\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.227.1\x10wit-bindgen-rust\x060.41.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
